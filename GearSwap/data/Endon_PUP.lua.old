-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------

-- Initialization function for this job file.
function get_sets()
    mote_include_version = 2

    -- Load and initialize the include file.
    include('Mote-Include.lua')
end

-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()
    -- List of pet weaponskills to check for
    petWeaponskills = S{"Slapstick", "Knockout", "Magic Mortar",
        "Chimera Ripper", "String Clipper", "Cannibal Blade", "Bone Crusher", "String Shredder",
    "Arcuballista", "Daze", "Armor Piercer", "Armor Shatterer"}

    send_command('wait 3;input /lockstyleset 98')

    -- state.PetMode = M{['description'] = 'Pet Mode', 'Hybrid', 'Tank', 'DPS'}
    -- state.PetMode:options('Default', 'DPS', 'Tank')

    -- send_command('bind %e gs c cycle PetMode;'..tostring(update_pet_mode(state.PetMode.value)))
    -- send_command('bind %e gs c cycle PetMode')

    -- Map automaton heads to combat roles
    -- petModes = {
    --     ['Harlequin Head'] = 'Melee',
    --     ['Sharpshot Head'] = 'Ranged',
    --     ['Valoredge Head'] = 'Tank',
    --     ['Stormwaker Head'] = 'Magic',
    --     ['Soulsoother Head'] = 'Heal',
    --     ['Spiritreaver Head'] = 'Nuke'
    -- }

    -- Subset of modes that use magic
    -- magicPetModes = S{'Nuke','Heal','Magic'}

    -- Var to track the current pet mode.
    -- state.PetMode = M{['description']='Pet Mode', 'None', 'Melee', 'Ranged', 'Tank', 'Magic', 'Heal', 'Nuke'}
    -- state.PetMode = M{['description']='Pet Mode'}
    -- state.PetMode:options('Default', 'DPS', 'Tank')
end

-------------------------------------------------------------------------------------------------------------------
-- User setup functions for this job.  Recommend that these be overridden in a sidecar file.
-------------------------------------------------------------------------------------------------------------------

-- Setup vars that are user-dependent.  Can override this function in a sidecar file.
function user_setup()
    state.OffenseMode:options('Normal', 'Acc', 'Fodder', 'Pet_Tank', 'CP', 'Trial')
    state.HybridMode:options('Normal', 'DT')
    state.WeaponskillMode:options('Normal', 'Acc', 'Fodder')
    state.PhysicalDefenseMode:options('PDT', 'Evasion')
    state.IdleMode:options('Default', 'Pet_Tank', 'CP', 'Craft', 'Fishing', 'Trial')

    -- Default maneuvers 1, 2, 3 and 4 for each pet mode.
    -- defaultManeuvers = {
    --     ['Melee'] = {'Fire Maneuver', 'Thunder Maneuver', 'Wind Maneuver', 'Light Maneuver'},
    --     ['Ranged'] = {'Wind Maneuver', 'Fire Maneuver', 'Thunder Maneuver', 'Light Maneuver'},
    --     ['Tank'] = {'Earth Maneuver', 'Dark Maneuver', 'Light Maneuver', 'Wind Maneuver'},
    --     ['Magic'] = {'Ice Maneuver', 'Light Maneuver', 'Dark Maneuver', 'Earth Maneuver'},
    --     ['Heal'] = {'Light Maneuver', 'Dark Maneuver', 'Water Maneuver', 'Earth Maneuver'},
    --     ['Nuke'] = {'Ice Maneuver', 'Dark Maneuver', 'Light Maneuver', 'Earth Maneuver'}
    -- }

    send_command('bind %q gs c cycle OffenseMode')
    send_command('bind %z gs c cycle IdleMode')
    -- update_pet_mode()
    select_default_macro_book()
end

function user_unload()
    send_command('unbind ^q')
    send_command('unbind ^e')
    send_command('unbind ^z')
end

-- Define sets used by this job file.
function init_gear_sets()
    -- Precast sets to enhance JAs
    -- sets.precast.JA['Tactical Switch'] = {feet="Cirque Scarpe +2"}

    -- sets.precast.JA['Repair'] = {feet="Foire Babouches"}

    sets.precast.JA.Maneuver = {
        body = "Kara. Farsetto +1",
        back = {
            name = "Visucius's Mantle",
            augments = {
                'Pet: Acc.+2 Pet: R.Acc.+2 Pet: Atk.+2 Pet: R.Atk.+2',
                'Accuracy+1 Attack+1',
                'STR+5',
                'Pet: Haste+2'
            }
        }
    }

    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Weaponskill sets                                                                                                                                              --
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Default set for any weaponskill that isn't any more specifically defined
    -- sets.precast.WS = {
    --     head="Whirlpool Mask",
    --     neck="Asperity Necklace",
    --     ear1="Bladeborn Earring",
    --     ear2="Steelflash Earring",
    --     body="Manibozho Jerkin",
    --     hands="Otronif Gloves",
    --     ring1="Rajas Ring",
    --     ring2="Epona's Ring",
    --     back="Dispersal Mantle",
    --     waist="Windbuffet Belt",
    --     legs="Manibozho Brais",
    --     feet="Manibozho Boots"
    -- }

    -- Specific weaponskill sets.  Uses the base set if an appropriate WSMod version isn't found.
    -- sets.precast.WS['Stringing Pummel'] = set_combine(
    --     sets.precast.WS, {
    --         neck="Rancor Collar",
    --         ear1="Brutal Earring",
    --         ear2="Moonshade Earring",
    --         ring1="Spiral Ring",
    --         waist="Soil Belt"
    --     }
    -- )

    -- sets.precast.WS['Stringing Pummel'].Mod = set_combine(sets.precast.WS['Stringing Pummel'], {legs="Nahtirah Trousers"})

    -- sets.precast.WS['Victory Smite'] = set_combine(
    --     sets.precast.WS, {
    -- 	    neck="Rancor Collar",
    -- 	    ear1="Brutal Earring",
    -- 	    ear2="Moonshade Earring",
    --         waist="Thunder Belt"
    --     }
    -- )

    -- sets.precast.WS['Shijin Spiral'] = set_combine(
    --     sets.precast.WS, {
    -- 	    neck="Light Gorget",
    --         waist="Light Belt"
    --     }
    -- )

    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Midcast Sets                                                                                                                                                  --
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- sets.midcast.FastRecast = {
    --     head="Haruspex Hat",
    --     ear2="Loquacious Earring",
    --     body="Otronif Harness +1",
    --     hands="Regimen Mittens",
    --     legs="Manibozho Brais",
    --     feet="Otronif Boots +1"
    -- }

    -- Midcast sets for pet actions
    -- sets.midcast.Pet.Cure = {legs="Foire Churidars"}

    -- sets.midcast.Pet['Elemental Magic'] = {feet="Pitre Babouches"}

    -- sets.midcast.Pet.WeaponSkill = {
    -- 	head="Cirque Cappello +2",
    -- 	hands="Cirque Guanti +2",
    --     legs="Cirque Pantaloni +2"
    -- }

    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Resting sets                                                                                                                                                  --
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- sets.resting = {
    --     head="Pitre Taj",
    --     neck="Wiglen Gorget",
    --     ring1="Sheltered Ring",
    --     ring2="Paguroidea Ring"
    -- }

    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Idle sets                                                                                                                                                     --
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    sets.idle = {
        main = "Karambit",
        range = "Animator P",
        ammo = "Automat. Oil +3",
        head = "Foire Taj +1",
        body = "Foire Tobe +1",
        hands = "Foire Dastanas +1",
        legs = "Foire Churidars +1",
        feet = "Hermes' Sandals",
        neck = "Empath Necklace",
        waist = "Isa Belt",
        left_ear = "Mache Earring",
        right_ear = "Pratik Earring",
        left_ring = "Varar Ring +1",
        right_ring = "Niqmaddu Ring",
        back = { name = "Visucius's Mantle", augments = {'Pet: Acc.+2 Pet: R.Acc.+2 Pet: Atk.+2 Pet: R.Atk.+2', 'Accuracy+1 Attack+1', 'STR+5', 'Pet: Haste+2'}}
    }

    sets.idle.Pet_Tank = {
        main = { name = "Condemners", augments = {'Pet: Damage taken -5%', 'Pet: DEX+10', 'Accuracy+15'}},
        range = "Animator P",
        ammo = "Automat. Oil +3",
        head = "Rao Kabuto +1",
        body = "Rao Togi +1",
        hands = "Rao kote +1",
        legs = "Rao Haidate +1",
        feet = "Rao Sune-Ate +1",
        neck = "Shepherd's Chain",
        waist = "Isa Belt",
        left_ear = "Rimeice Earring",
        right_ear = "Handler's Earring +1",
        left_ring = "Thurandaut Ring",
        right_ring = "Overbearing Ring",
        back = 
        {
            name = "Visucius's Mantle",
            augments = {
                'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20', 'Accuracy+20 Attack+20', 'Accuracy+5', 'Pet: "Regen"+10', 'System: 1 ID: 1247 Val: 4'
            }
        }
    }

    sets.idle.Trial = set_combine(
        sets.idle, {
            main = "Inferno Claws"
        }
    )

    -- sets.idle.Town = set_combine(sets.idle, {main="Tinhaspa"})
    sets.idle.Town = set_combine(
        sets.idle,
        {
            feet = "Hermes' Sandals",
            back = { name = "Visucius's Mantle", augments = {'Pet: Acc.+2 Pet: R.Acc.+2 Pet: Atk.+2 Pet: R.Atk.+2', 'Accuracy+1 Attack+1', 'STR+5', 'Pet: Haste+2'}}
        }
    )

    -- Set for idle while pet is out (eg: pet regen gear)
    sets.idle.Pet = set_combine(
        sets.idle,
        {
            back = { name = "Visucius's Mantle", augments = {'Pet: Acc.+2 Pet: R.Acc.+2 Pet: Atk.+2 Pet: R.Atk.+2', 'Accuracy+1 Attack+1', 'STR+5', 'Pet: Haste+2'}}
        }
    )

    sets.idle.CP = set_combine(
        sets.idle,
        {
            right_ring = "Trizek Ring",
            back = { name = "Mecisto. Mantle", augments = {'Cap. Point+48%', 'HP+28', '"Mag.Atk.Bns."+1', 'DEF+2'}}
        }
    )

    sets.idle.Craft = set_combine(
        sets.idle,
        {

        }
    )

    sets.idle.Fishing = {
        main = empty,
        range = "Lu Shang's F. Rod",
        head = empty,
        body = "Fsh. Tunica",
        hands = "Fsh. Gloves",
        legs = "Fisherman's Hose",
        feet = "Fisherman's Boots",
        neck = empty,
        waist = empty,
        left_ear = empty,
        right_ear = empty,
        left_ring = empty,
        back = empty,
        right_ring = "Warp Ring"
    }

    -- Idle sets to wear while pet is engaged
    -- sets.idle.Pet.Engaged = {
    --     head="Foire Taj",
    --     neck="Wiglen Gorget",
    --     ear1="Bladeborn Earring",
    --     ear2="Cirque Earring",
    --     body="Foire Tobe",
    --     hands="Regimen Mittens",
    --     ring1="Sheltered Ring",
    --     ring2="Paguroidea Ring",
    --     back="Dispersal Mantle",
    --     waist="Hurch'lan Sash",
    --     legs="Foire Churidars",
    --     feet="Foire Babouches"
    -- }

    -- sets.idle.Pet.Engaged.Ranged = set_combine(
    --     sets.idle.Pet.Engaged, {
    --         hands="Cirque Guanti +2",
    --         legs="Cirque Pantaloni +2"
    --     }
    -- )

    -- sets.idle.Pet.Engaged.Nuke = set_combine(
    --     sets.idle.Pet.Engaged, {
    --         legs="Cirque Pantaloni +2",
    --         feet="Cirque Scarpe +2"
    --     }
    -- )

    -- sets.idle.Pet.Engaged.Magic = set_combine(
    --     sets.idle.Pet.Engaged, {
    --         legs="Cirque Pantaloni +2",
    --         feet="Cirque Scarpe +2"
    --     }
    -- )


    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Defense sets                                                                                                                                                  --
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- sets.defense.Evasion = {
    --     head="Whirlpool Mask",
    --     neck="Twilight Torque",
    --     body="Otronif Harness +1",
    --     hands="Otronif Gloves",
    --     ring1="Defending Ring",
    --     ring2="Beeline Ring",
    --     back="Ik Cape",
    --     waist="Hurch'lan Sash",
    --     legs="Nahtirah Trousers",
    --     feet="Otronif Boots +1"
    -- }

    -- sets.defense.PDT = {
    --     head="Whirlpool Mask",
    --     neck="Twilight Torque",
    --     body="Otronif Harness +1",
    --     hands="Otronif Gloves",
    --     ring1="Defending Ring",
    --     ring2=gear.DarkRing.physical,
    --     back="Shadow Mantle",
    --     waist="Hurch'lan Sash",
    --     legs="Nahtirah Trousers",
    --     feet="Otronif Boots +1"
    -- }

    -- sets.defense.MDT = {
    --     head="Whirlpool Mask",
    --     neck="Twilight Torque",
    --     body="Otronif Harness +1",
    --     hands="Otronif Gloves",
    --     ring1="Defending Ring",
    --     ring2="Shadow Ring",
    --     back="Tuilha Cape",
    --     waist="Hurch'lan Sash",
    --     legs="Nahtirah Trousers",
    --     feet="Otronif Boots +1"
    -- }

    -- sets.Kiting = {feet="Hermes' Sandals"}


    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Engaged sets                                                                                                                                                  --
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- Variations for TP weapon and (optional) offense/defense modes.  Code will fall back on previous
    -- sets if more refined versions aren't defined.
    -- If you create a set with both offense and defense modes, the offense mode should be first.
    -- EG: sets.engaged.Dagger.Accuracy.Evasion

    -- Normal melee group
    sets.engaged = {
        main = "Karambit",
        range = "Animator P",
        ammo = "Automat. Oil +3",
        head = { name = "Lilitu Headpiece", augments = {'STR+10', 'DEX+10', 'Attack+15', 'Weapon skill damage +3%'}},
        body = "Herculean Vest",
        hands = { name = "Herculean Gloves", augments = {'Accuracy+27', '"Triple Atk."+4', 'STR+7'}},
        legs = { name = "Herculean Trousers", augments = {'Weapon Skill Acc.+7', 'STR+1', 'Phalanx +2', 'Accuracy+20 Attack+20', 'Mag. Acc.+18 "Mag.Atk.Bns."+18'}},
        feet = { name = "Herculean Boots", augments = {'Accuracy+10 Attack+10', '"Triple Atk."+2', 'DEX+6', 'Accuracy+15', 'Attack+7'}},
        neck = "Lissome Necklace",
        waist = "Isa Belt",
        left_ear = "Mache Earring",
        right_ear = "Pratik Earring",
        left_ring = "Apate Ring",
        right_ring = "Niqmaddu Ring",
        back = { name = "Visucius's Mantle", augments = {'Pet: Acc.+2 Pet: R.Acc.+2 Pet: Atk.+2 Pet: R.Atk.+2', 'Accuracy+1 Attack+1', 'STR+5', 'Pet: Haste+2'}}
    }

    sets.engaged.CP = set_combine(
        sets.engaged,
        {
            back = {
                name = "Mecisto. Mantle",
                augments = {
                    'Cap. Point+48%', 'HP+28', '"Mag.Atk.Bns."+1', 'DEF+2'
                }
            }
        }
    )

    sets.engaged.Trial = set_combine(
        sets.engaged, {
            main = "Inferno Claws"
        }
    )

    -- sets.engaged.Acc = {
    --     head="Whirlpool Mask",
    --     neck="Ej Necklace",
    --     ear1="Bladeborn Earring",
    --     ear2="Steelflash Earring",
    --     body="Qaaxo Harness",
    --     hands="Otronif Gloves",
    --     ring1="Rajas Ring",
    --     ring2="Epona's Ring",
    --     back="Dispersal Mantle",
    --     waist="Hurch'lan Sash",
    --     legs="Manibozho Brais",
    --     feet="Otronif Boots +1"
    -- }

    -- sets.engaged.DT = {
    --     head="Whirlpool Mask",
    --     neck="Twilight Torque",
    --     ear1="Bladeborn Earring",
    --     ear2="Steelflash Earring",
    --     body="Otronif Harness +1",
    --     hands="Regimen Mittens",
    --     ring1="Defending Ring",
    --     ring2="Epona's Ring",
    --     back="Iximulew Cape",
    --     waist="Windbuffet Belt",
    --     legs="Manibozho Brais",
    --     feet="Otronif Boots +1"
    -- }

    -- sets.engaged.Acc.DT = {
    --     head="Whirlpool Mask",
    --     neck="Twilight Torque",
    --     ear1="Bladeborn Earring",
    --     ear2="Steelflash Earring",
    --     body="Otronif Harness +1",
    --     hands="Regimen Mittens",
    --     ring1="Defending Ring",
    --     ring2="Beeline Ring",
    --     back="Iximulew Cape",
    --     waist="Hurch'lan Sash",
    --     legs="Manibozho Brais",
    --     feet="Otronif Boots +1"
    -- }

    sets.engaged.Pet_Tank = {
        main = {
            name = "Condemners",
            augments = {
                'Pet: Damage taken -5%',
                'Pet: DEX+10',
                'Accuracy+15'
            }
        },
        range = "Animator P",
        ammo = "Automat. Oil +3",
        head = "Rao Kabuto +1",
        body = "Rao Togi +1",
        hands = "Rao kote +1",
        legs = "Rao Haidate +1",
        feet = "Rao Sune-Ate +1",
        neck = "Shepherd's Chain",
        waist = "Isa Belt",
        left_ear = "Rimeice Earring",
        right_ear = "Handler's Earring +1",
        left_ring = "Thurandaut Ring",
        right_ring = "Overbearing Ring",
        back = {
            name = "Visucius's Mantle",
            augments = {
                'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20',
                'Accuracy+20 Attack+20',
                'Accuracy+5',
                'Pet: "Regen"+10',
                'System: 1 ID: 1247 Val: 4'
            }
        }
    }

end


-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when pet is about to perform an action
function job_pet_midcast(spell, action, spellMap, eventArgs)
    if petWeaponskills:contains(spell.english) then
        classes.CustomClass = "Weaponskill"
    end
end


-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
    if buff == 'Wind Maneuver' then
        handle_equipping_gear(player.status)
    end
end

-- Called when a player gains or loses a pet.
-- pet == pet gained or lost
-- gain == true if the pet was gained, false if it was lost.
-- function job_pet_change(pet, gain)
--     update_pet_mode()
-- end

-- Called when the pet's status changes.
-- function job_pet_status_change(newStatus, oldStatus)
--     if newStatus == 'Engaged' then
--         display_pet_status()
--     end
-- end


-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
-- function job_update(cmdParams, eventArgs)
--     update_pet_mode()
-- end


-- Set eventArgs.handled to true if we don't want the automatic display to be run.
-- function display_current_job_state(eventArgs)
--     display_pet_status()
-- end


-------------------------------------------------------------------------------------------------------------------
-- User self-commands.
-------------------------------------------------------------------------------------------------------------------

-- Called for custom player commands.
-- function job_self_command(cmdParams, eventArgs)
--     if cmdParams[1] == 'maneuver' then
--         if pet.isvalid then
--             local man = defaultManeuvers[state.PetMode.value]
--             if man and tonumber(cmdParams[2]) then
--                 man = man[tonumber(cmdParams[2])]
--             end

--             if man then
--                 send_command('input /pet "'..man..'" <me>')
--             end
--         else
--             add_to_chat(123,'No valid pet.')
--         end
--     end
-- end

-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

-- Get the pet mode value based on the equipped head of the automaton.
-- Returns nil if pet is not valid.
-- function get_pet_mode()
--     if pet.isvalid then
--         return petModes[pet.head] or 'None'
--     else
--         return 'None'
--     end
-- end

-- Update state.PetMode, as well as functions that use it for set determination.
-- function update_pet_mode()
--     state.PetMode:set(get_pet_mode())
--     update_custom_groups()
-- end

-- Update custom groups based on the current pet.
-- function update_custom_groups()
--     classes.CustomIdleGroups:clear()
--     if pet.isvalid then
--         classes.CustomIdleGroups:append(state.PetMode.value)
--     end
-- end

-- Display current pet status.
-- function display_pet_status()
--     if pet.isvalid then
--         local petInfoString = pet.name..' ['..pet.head..']: '..tostring(pet.status)..'  TP='..tostring(pet.tp)..'  HP%='..tostring(pet.hpp)
--
--         if magicPetModes:contains(state.PetMode.value) then
--             petInfoString = petInfoString..'  MP%='..tostring(pet.mpp)
--         end
--
--         add_to_chat(122,petInfoString)
--     end
-- end

-- x = 1
--
-- function update_pet_mode(pet_status)
--     local function get_pet_status()
--         return pet_status
--     end
--
--     local function set_pet_status(newStatus)
--         if pet_status ~= newStatus then
--             newStatus = pet_status
--             if newStatus == 'Default' then
--                 pet_mode_string = 'input //acon equipset bruisertank'
--                 x = x + 1
--                 add_to_chat(122, newStatus)
--             elseif newStatus == 'DPS' then
--                 pet_mode_string = 'input //acon equipset dd'
--                 x = x + 1
--                 add_to_chat(122, newStatus)
--             elseif newStatus == 'Tank' then
--                 pet_mode_string = 'input //acon equipset turtletank'
--                 x = 1
--                 add_to_chat(122, newStatus)
--             end
--         end
--         return pet_mode_string
--     end
--     --     state.PetMode = M{['description']='Pet Mode'}
--     --     state.PetMode:options('Default', 'DPS', 'Tank')
--     --
--     --     pet_mode = state.PetMode.value
--     --
--     --     if pet_mode == 'Default' then
--     --         pet_mode_string = 'input //acon equipset bruisertank'
--     --     elseif pet_mode == 'DPS' then
--     --         pet_mode_string = 'input //acon equipset dd'
--     --     elseif pet_mode == 'Tank' then
--     --         pet_mode_string = 'input //acon equipset turtletank'
--     --     end
--     --     add_to_chat(122, pet_mode)
--     --     return pet_mode_string
--
--     -- local pet_mode = state.PetMode[x]
--     -- -- if current_pet_mode ~= pet_mode then
--     -- --   pet_mode = current_pet_mode
--     -- if pet_mode == 'Default' then
--     --     pet_mode_string = 'input //acon equipset bruisertank'
--     --     x = x + 1
--     --     add_to_chat(122, pet_mode)
--     -- elseif pet_mode == 'DPS' then
--     --     pet_mode_string = 'input //acon equipset dd'
--     --     x = x + 1
--     --     add_to_chat(122, pet_mode)
--     -- elseif pet_mode == 'Tank' then
--     --     pet_mode_string = 'input //acon equipset turtletank'
--     --     x = 1
--     --     add_to_chat(122, pet_mode)
--     -- end
--     -- -- end
--     -- return pet_mode_string
--     return set_pet_status
-- end

function user_status_change(newStatus, oldStatus)
    if newStatus == 'Engaged' then
        send_command('input /pet "Deploy" <t>')
    end
end

-- Select default macro book on initial load or subjob change.
function select_default_macro_book()
    -- Default macro set/book
    if player.sub_job == 'DNC' then
        set_macro_page(2, 3)
    elseif player.sub_job == 'WAR' then
        set_macro_page(1, 3)
    else
        set_macro_page(1, 3)
    end
end
